"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const prifile_1 = require("../../service/prifile");
const rental_pb_1 = require("../../service/proto_gen/rental/rental_pb");
const request_1 = require("../../service/request");
const format_1 = require("../../utils/format");
function formatDate(millis) {
    const dt = new Date(millis);
    const y = dt.getFullYear();
    const m = dt.getMonth() + 1;
    const d = dt.getDay();
    return `${format_1.padString(y)}-${format_1.padString(m)}-${format_1.padString(d)}`;
}
Page({
    redirectURL: '',
    ProfileRefresher: 0,
    data: {
        birthDate: '2022-04-11',
        gendersIndex: 0,
        genders: ["未知", "男", "女"],
        licImgURL: '',
        licNo: '',
        name: '',
        state: rental_pb_1.rental.v1.IdentityStatus[rental_pb_1.rental.v1.IdentityStatus.UNSUBMITTED],
    },
    renderProfile(p) {
        this.renderIdentity(p.identity);
        this.setData({
            state: rental_pb_1.rental.v1.IdentityStatus[p.identityStatus || 0],
        });
    },
    renderIdentity(i) {
        this.setData({
            licNo: (i === null || i === void 0 ? void 0 : i.licNumber) || '',
            name: (i === null || i === void 0 ? void 0 : i.name) || '',
            gendersIndex: (i === null || i === void 0 ? void 0 : i.gender) || 0,
            birthDate: formatDate((i === null || i === void 0 ? void 0 : i.birthDataMillis) || 0),
        });
    },
    onLoad(opt) {
        const o = opt;
        console.log("o的值:", o);
        if (o.redirect) {
            this.redirectURL = decodeURIComponent(o.redirect);
            console.log("需要的RUL:", this.redirectURL);
        }
        prifile_1.ProfileService.getProfile().then(p => {
            this.renderProfile(p);
        });
        prifile_1.ProfileService.getProfilePhoto().then(p => {
            this.setData({
                licImgURL: p.url || '',
            });
        });
    },
    onUnload() {
        this.clearProfileRefresher();
    },
    onUploadLic() {
        wx.chooseImage({
            success: (res) => __awaiter(this, void 0, void 0, function* () {
                if (res.tempFilePaths.length === 0) {
                    return;
                }
                this.setData({
                    licImgURL: res.tempFilePaths[0],
                });
                const photoRes = yield prifile_1.ProfileService.createProfilePhoto();
                console.log("上传图片地址:", photoRes.uploadUrl);
                if (!photoRes.uploadUrl) {
                    return;
                }
                yield request_1.Coolcar.uploadfile({
                    localPath: res.tempFilePaths[0],
                    url: photoRes.uploadUrl || '',
                });
                const Identity = yield prifile_1.ProfileService.completeProfilePhoto();
                this.renderIdentity(Identity);
            })
        });
    },
    onLicnoChange(e) {
        this.setData({
            licNo: e.detail.value
        });
    },
    onNameChange(e) {
        this.setData({
            name: e.detail.value,
        });
    },
    onGenderChange(e) {
        this.setData({
            gendersIndex: parseInt(e.detail.value),
        });
    },
    onBirthDateChange(e) {
        this.setData({
            birthDate: e.detail.value,
        });
    },
    onSubmit() {
        prifile_1.ProfileService.submitProfile({
            licNumber: this.data.licNo,
            name: this.data.name,
            gender: this.data.gendersIndex,
            birthDataMillis: Date.parse(this.data.birthDate),
        }).then(p => {
            this.renderProfile(p);
            this.scheduleProfileRefresher();
        });
    },
    scheduleProfileRefresher() {
        this.ProfileRefresher = setInterval(() => {
            prifile_1.ProfileService.getProfile().then(p => {
                this.renderProfile(p);
                console.log("status:", p.identityStatus);
                if (p.identityStatus !== rental_pb_1.rental.v1.IdentityStatus.PENDING) {
                    this.clearProfileRefresher;
                }
                if (p.identityStatus === rental_pb_1.rental.v1.IdentityStatus.VERIFIED) {
                    this.onlicVerified();
                }
            });
        }, 1000);
    },
    clearProfileRefresher() {
        if (this.ProfileRefresher) {
            clearInterval(this.ProfileRefresher);
            this.ProfileRefresher = 0;
        }
    },
    onResubmit() {
        prifile_1.ProfileService.clearProfile().then(p => this.renderProfile(p));
        prifile_1.ProfileService.clearProfilePhoto().then(() => {
            this.setData({
                licImgURL: '',
            });
        });
    },
    onlicVerified() {
        if (this.redirectURL) {
            wx.redirectTo({
                url: this.redirectURL,
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,